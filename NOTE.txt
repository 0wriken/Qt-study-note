一、部件基础
很简单直接拖拉即可
输入输出部件
控件：作为用户输入与程序运行的桥梁
微调：ctrl+方向键
Qobject:对象名
Qwidget:所有部件的基类
QcomboBox:组合框
查单词即可
输入部件：
	富文本
	纯文本
	自选盒

	滚动条
	滑条
	进度条

输出部件：
	Lable:
	Text Browser
	网页浏览器：
按键
窗口
容器
二、布局
将内部的部件按照一定规律摆放为整体
 

三、信号与槽
本质是对象间的通信：部件间通信，源于同一个基类
	数据传递
	事件响应
信号的写法：	
	函数的声明
	无需定义
信号分类：
	内置信号
		无返回值，函数名表触发条件，形参传递出去的数据
	自定义信号：
connect(A,信号，B，槽函数)
槽函数：slots
信号：signals
关联：A发射什么信号给B，B怎么处理
一个类被继承，该类的信号与槽也被继承
优点与缺点：	
	类型安全：信号与槽的函数参数在个数与类型应该一致
			  槽必须<=信号个数，槽的个数与信号从前往后传递
	松散耦合：各个模块间的独立性强，不需要在意对象的想法与关联情况。
	性能相对于回调慢了一扭。
四、实现
1、预定义
	基于UI，手动连线建立关联，列出所有信号
		转到槽：固定死关联
2、自定义
五、字符串类
QString
	隐式共享：共享同一块空间，写时重赋空间
	内存分配策略
默认+=为重载操作符
sprintf("%lf",132.35);//重载类型
arg()//不需要说明符
trimmed();//移除两端空白字符
六、资源文件
	添加  引用
七、对话框
根据是否阻塞其他界面分为：
	模态（阻塞） 
		全模态
    非模态

八、容器类
QList <> 数组
无参构造函数
	foreach(int n,s) 循环打印
	{
		qDebug()<<n;
	}
	for(int n:s)
	{
		qDebug()<<n;
	}
QLinkList  链表
	没有下标：使用迭代器
	QLinkListIterator<T> i(list) 
	for(; i.hasNext(); )
	{
		qDebug()<<i.next();
	}
QVector   类

九、常用部件
QFrame 边框
QLabel 标签
	图片
	QPixmap map()
	ui->label->setpi
	ui->label->resize() //标签适应图片
	ui->label->setSccon(y=ture)  //设置自适应
	动图
		QMovie *m(路劲，)
		ui->label->set()
		m->start();
	数字
		ui->setnum()
QpusBotton
	文本 
	图片 
	标签	 Qmenu
















